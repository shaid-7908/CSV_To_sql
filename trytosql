import pandas as pd
from sqlalchemy import create_engine

# Load the second CSV file
second_file_path = 'JACdata324.csv'  # Replace with your second CSV file path
new_data = pd.read_csv(second_file_path, low_memory=False)

def parse_mixed_formats(date_str):
    for fmt in ('%m-%d-%y', '%m/%d/%y'):
        try:
            return pd.to_datetime(date_str, format=fmt)
        except ValueError:
            continue
    return pd.NaT

new_data['dob'] = new_data['dob'].apply(parse_mixed_formats)
new_data['entered'] = new_data['entered'].apply(parse_mixed_formats)
new_data['placed_dt'] = new_data['placed_dt'].apply(parse_mixed_formats)
new_data['dt_verif_i'] = new_data['dt_verif_i'].apply(parse_mixed_formats)
new_data['dt_verif_h'] = new_data['dt_verif_h'].apply(parse_mixed_formats)
new_data['casestatdt'] = new_data['casestatdt'].apply(parse_mixed_formats)
new_data['site_date'] = new_data['site_date'].apply(parse_mixed_formats)
new_data['cdcaids_dt'] = new_data['cdcaids_dt'].apply(parse_mixed_formats)
new_data['pstart_dt'] = new_data['pstart_dt'].apply(parse_mixed_formats)
new_data['hivstat_dt'] = new_data['hivstat_dt'].apply(parse_mixed_formats)
new_data['sstart_dt'] = new_data['sstart_dt'].apply(parse_mixed_formats)
new_data['sexp_dt'] = new_data['sexp_dt'].apply(parse_mixed_formats)

# Convert date columns to datetime format
# Ensure you use the same date format mapping as before
# date_columns_formats = {
#     'prog_date': '%d-%m-%Y',
#     'resdate': '%d/%m/%Y',
#     'dt_rprovid': '%d/%m/%Y'
# }

# for col, fmt in date_columns_formats.items():
#     new_data[col] = pd.to_datetime(new_data[col], format=fmt, errors='coerce')

new_data = new_data.drop(columns=['ID'])

# Database connection parameters
db_user = 'dev2'
db_password = 'Str0ngPssword'
db_host = 'localhost'
db_port = '3306'
db_name = 'workmate'
table_name = 'user_data'

# Create a connection string
connection_string = f'mysql+pymysql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}'

# Create a SQLAlchemy engine
engine = create_engine(connection_string)

# Append the new data to the existing SQL table
new_data.to_sql(name=table_name, con=engine, if_exists='append', index=False)

print(f"Data from the second CSV successfully appended to the table {table_name} in the database {db_name}.")
